# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
commands:

  abort_for_docs:
    steps:
      - run:
          name: Avoid tests for docs
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required"
              circleci step halt
            fi

  abort_for_noci:
    steps:
      - run:
          name: Ignore CI for specific branches
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi


  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

#  build_and_test:
#    docker:
#      - image: 'ubuntu:bionic'
#    steps:
#      - run:
#          name: installations
#          command: apt-get -qq update; apt-get install -y ca-certificates wget build-essential git python-pip
#      - run:
#          name: Redis_5_upgrade
#          command: cd ..; git clone https://github.com/antirez/redis.git; cd ./redis; git fetch; git checkout 6.0.9; make; make install
#      - run:
#          name: download_RedisGears
#          command: cd ..; wget http://redismodules.s3.amazonaws.com/redisgears/snapshots/redisgears.linux-bionic-x64.master.zip; apt-get install -y unzip; unzip redisgears.linux-bionic-x64.master.zip
#      - run:
#          name: download_RedisGears_deps
#          command: cd ..; wget http://redismodules.s3.amazonaws.com/redisgears/snapshots/redisgears-python.linux-bionic-x64.master.tgz; mkdir -p /var/opt/redislabs/modules/rg/; cd /var/opt/redislabs/modules/rg/; tar -xvf /root/redisgears-python.linux-bionic-x64.master.tgz
#      - checkout
#      - run:
#          name: install_redisgears_py_to_RedisGears_virtual_env
#          command: /var/opt/redislabs/modules/rg/python3_1.2.5/bin/python3 setup.py install
#      - run:
#          name: install RLTest
#          command: /var/opt/redislabs/modules/rg/python3_1.2.5/bin/python3 -m pip install git+https://github.com/Grokzen/redis-py-cluster.git@master git+https://github.com/RedisLabsModules/RLTest.git
#      - run:
#          name: run_tests
#          command: /var/opt/redislabs/modules/rg/python3_1.2.5/bin/python3 -m RLTest --module ../redisgears.so --module-args "Plugin /var/opt/redislabs/modules/rg/plugin/gears_python.so"

#workflows:
#  version: 2
#  commit:
#    jobs:
#      - build_and_test
#  nightly:
#    triggers:
#      - schedule:
#          cron: "0 0 * * *"
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - build_and_test

  build_and_test:
    steps:
      - checkout

      - run:
          name: install tox dependencies
          command: |
            /var/opt/redislabs/modules/rg/python3_1.2.5/bin/python3 -m pip install --upgrade pip virtualenv
            /var/opt/redislabs/modules/rg/python3_1.2.5/bin/python3 -m pip install -r .circleci/circle_requirements.txt

      - run:
          name: build sdist and wheels
          command: |
            /var/opt/redislabs/modules/rg/python3_1.2.5/bin/python3 -m poetry build

#      - run:
#          name: lint
#          command: |
#            /var/opt/redislabs/modules/rg/python3_1.2.5/bin/python3 -m tox -e linters
#
      - run:
          name: run tests
          command:
            /var/opt/redislabs/modules/rg/python3_1.2.5/bin/python3 -m tox -e tests

jobs:
  build:
    docker:
      - image: redislabs/redisgears:1.2.5

    steps:
      - build_and_test
      - store_artifacts:
          path: test-reports
          destination: test-reports

  nightly:
    docker:
      - image: redislabs/redisgears:1.2.5
    steps:
      - build_and_test
      - dockerize

on-any-branch: &on-any-branch
  filters:
    branches:
      only:
        - /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only:
        - master

workflows:
  version: 2
  commit:
    jobs:
      - build:
          <<: *on-any-branch

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          <<: *on-master
    jobs:
      - build
